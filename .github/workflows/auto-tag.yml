name: Auto Tag on Merge

on:
  push:
    branches:
      - main

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    # Only run when commits come from develop branch merge
    if: contains(github.event.head_commit.message, 'Merge') || contains(github.event.head_commit.message, 'develop')
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get latest tag
      id: get_latest_tag
      run: |
        # Get the latest tag that matches vX.Y.Z pattern
        LATEST_TAG=$(git describe --tags --match="v*.*.*" --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
        echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT
        
        # Extract version numbers
        VERSION=${LATEST_TAG#v}
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        echo "Current version: $MAJOR.$MINOR.$PATCH"
        echo "MAJOR=$MAJOR" >> $GITHUB_OUTPUT
        echo "MINOR=$MINOR" >> $GITHUB_OUTPUT
        echo "PATCH=$PATCH" >> $GITHUB_OUTPUT
    
    - name: Calculate new version
      id: new_version
      run: |
        MAJOR=${{ steps.get_latest_tag.outputs.MAJOR }}
        MINOR=${{ steps.get_latest_tag.outputs.MINOR }}
        PATCH=${{ steps.get_latest_tag.outputs.PATCH }}
        
        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_TAG="v${MAJOR}.${MINOR}.${NEW_PATCH}"
        
        echo "New tag will be: $NEW_TAG"
        echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
        echo "NEW_VERSION=${MAJOR}.${MINOR}.${NEW_PATCH}" >> $GITHUB_OUTPUT
    
    - name: Update package.json version
      run: |
        # Update version in package.json
        npm version ${{ steps.new_version.outputs.NEW_VERSION }} --no-git-tag-version
        
        # Commit the version change
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add package.json
        # Only add package-lock.json if it exists and was modified
        [ -f package-lock.json ] && git add package-lock.json || true
        git diff --staged --quiet || git commit -m "chore: bump version to ${{ steps.new_version.outputs.NEW_VERSION }} [skip ci]"
    
    - name: Create and push tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create annotated tag
        git tag -a ${{ steps.new_version.outputs.NEW_TAG }} -m "Release ${{ steps.new_version.outputs.NEW_TAG }}"
        
        # Push changes and tag using GITHUB_TOKEN
        git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git main
        git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git ${{ steps.new_version.outputs.NEW_TAG }}
    
    - name: Trigger release workflow
      uses: actions/github-script@v6
      with:
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'release.yml',
            ref: '${{ steps.new_version.outputs.NEW_TAG }}',
          });
      continue-on-error: true