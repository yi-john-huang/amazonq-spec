# 機能設計文書の作成

すでに承認された要件を持つ機能の詳細な設計文書を作成したいと思います。技術的実装アプローチの設計にご協力ください。

## 機能情報
- **機能名**: {{FEATURE_NAME}}
- **プロジェクト名**: {{PROJECT_NAME}}
- **仕様パス**: {{SPEC_PATH}}
- **要件パス**: {{REQUIREMENTS_PATH}}

## 前提条件確認
{{#if REQUIREMENTS_APPROVED}}
✅ 要件が確認され承認されています。
{{else}}
⚠️  **重要**: 設計に進む前に、要件書を確認して承認したことを確認してください。

**要件書を確認して承認しましたか？** [y/N]

確認していない場合は、`{{REQUIREMENTS_PATH}}`を確認し、続行する前にすべての要件が正しいことを確認してください。
{{/if}}

## 要件要約
{{REQUIREMENTS_SUMMARY}}

## プロジェクトコンテキスト
- **アーキテクチャ**: {{ARCHITECTURE_TYPE}}
- **技術スタック**: {{TECHNOLOGY_STACK}}
- **既存コードベース**: {{CODEBASE_STRUCTURE}}
- **統合ポイント**: {{INTEGRATION_POINTS}}

## 設計制約
{{#if DESIGN_CONSTRAINTS}}
{{DESIGN_CONSTRAINTS}}
{{else}}
- 既存のプロジェクトアーキテクチャパターンに従う
- 現在のコードベーススタイルとの一貫性を維持
- 後方互換性を確保
- 保守性とテスト容易性を最適化
{{/if}}

## 依頼内容

以下を対象とする包括的な設計文書を作成してください：

### 1. アーキテクチャ設計
- 高レベルコンポーネントアーキテクチャ
- データフロー図
- 統合パターン
- 関心の分離

### 2. データ設計
- データモデルとスキーマ
- データ関係とフロー
- 永続化戦略
- データ検証ルール

### 3. API設計
- エンドポイント仕様
- リクエスト/レスポンス形式
- 認証と認可
- エラー処理

### 4. ユーザーインターフェース設計
- UI/UX ワイヤーフレーム
- ユーザージャーニー
- インタラクションパターン
- レスポンシブデザイン考慮事項

### 5. セキュリティ設計
- 認証と認可戦略
- データ保護
- セキュリティベストプラクティス
- 脆弱性対策

### 6. パフォーマンス設計
- キャッシュ戦略
- 最適化アプローチ
- スケーラビリティ考慮事項
- モニタリング戦略

## 期待する出力形式

設計文書を以下のように構造化してください：
```markdown
# 設計: [機能名]

## 概要
[設計アプローチの要約]

## アーキテクチャ概要
[システム構成の高レベル図]

## コンポーネント設計
### コンポーネント1
**責任**: [このコンポーネントが何をするか]
**インターフェース**: [他とどのやり取りするか]
**実装**: [実装の詳細]

## データ設計
[データベーススキーマ、モデル、関係]

## API仕様
[RESTエンドポイント、GraphQLスキーマなど]

## セキュリティ実装
[セキュリティ対策の詳細]

## パフォーマンス最適化
[パフォーマンス戦略]

## テスト戦略
[テストアプローチと範囲]

## 実装フェーズ
[段階的実装計画]
```

設計が完了したら、次のステップは`/kiro:spec-tasks {{FEATURE_NAME}}`を使用したタスク分解です。

---

*このプロンプトはKiroスタイルSpec-Driven Developmentワークフローの一部です。*