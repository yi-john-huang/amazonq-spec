# タスク分解の生成

承認された設計に基づいて、具体的で実行可能な実装タスクの詳細な分解を作成したいと思います。

## 機能情報
- **機能名**: {{FEATURE_NAME}}
- **プロジェクト名**: {{PROJECT_NAME}}
- **仕様パス**: {{SPEC_PATH}}
- **設計パス**: {{DESIGN_PATH}}

## 前提条件確認
{{#if DESIGN_APPROVED}}
✅ 要件と設計の両方が確認され承認されています。
{{else}}
⚠️  **重要**: タスク分解に進む前に、要件と設計の両方を確認して承認したことを確認してください。

**要件と設計の両方を確認して承認しましたか？** [y/N]

確認していない場合は、以下を確認してから続行してください：
- 要件書: `{{REQUIREMENTS_PATH}}`
- 設計書: `{{DESIGN_PATH}}`
{{/if}}

## 設計要約
{{DESIGN_SUMMARY}}

## 開発コンテキスト
- **開発環境**: {{DEV_ENVIRONMENT}}
- **チームサイズ**: {{TEAM_SIZE}}
- **タイムライン**: {{TIMELINE}}
- **複雑さレベル**: {{COMPLEXITY_LEVEL}}

## 依頼内容

承認された設計を実行可能な開発タスクに分解してください：

### 1. 実装フェーズ
各フェーズの論理的グループ化：
- **フェーズ1**: 基盤とコア機能
- **フェーズ2**: ビジネスロジックと統合
- **フェーズ3**: UI/UX実装
- **フェーズ4**: テストと検証
- **フェーズ5**: 最終化と最適化

### 2. タスク分解
各タスクに以下を含める：
- 明確なタスク説明
- 受入基準
- 推定工数
- 前提条件と依存関係
- 成果物
- 定義の完了

### 3. リスク評価
- 高リスクタスクの特定
- 技術的な課題
- 軽減戦略

## 期待する出力形式

タスク文書を以下のように構造化してください：
```markdown
# タスク: [機能名]

## 実装概要
[実装アプローチの要約]

## フェーズ1: 基盤設定
### TASK-001: [タスクタイトル]
**説明**: [タスクの詳細な説明]
**推定工数**: [時間/日数]
**優先度**: 高/中/低
**依存関係**: [前提となるタスク]
**受入基準**:
- [ ] 基準1
- [ ] 基準2
**成果物**: [作成される成果物]
**定義の完了**:
- [ ] コード完了
- [ ] テスト通過
- [ ] レビュー完了

## フェーズ2: [フェーズ名]
[フェーズ2のタスクを同様の形式で続ける]

## リスクとマイルストーン
### 高リスクタスク
- [リスクの説明と軽減策]

### 主要マイルストーン
- [重要な完了ポイント]

## テスト戦略
- [テストアプローチ]
- [テストカバレッジ要件]
```

各タスクが以下の要件を満たすことを確認してください：
- **実行可能**: 1-3日で完了可能
- **独立性**: 他のタスクから独立して作業可能
- **テスト可能**: 明確な成功基準
- **追跡可能**: 要件と設計に追跡可能

タスク分解完了後、実装は`/kiro:spec-impl {{FEATURE_NAME}}`を使用して開始できます。

---

*このプロンプトはKiroスタイルSpec-Driven Developmentワークフローの一部です。*