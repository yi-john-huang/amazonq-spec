# {{projectName}} - Amazon Q CLI 設定

*{{timestamp}} に amazonq-sdd パッケージ v{{version}} によって生成*

## プロジェクトコンテキスト

このプロジェクトは、Kiroスタイルの体系的機能開発手法に従って、Spec-Driven Development (SDD) ワークフロー用にAmazon Q CLIを使用しています。

**プロジェクト詳細:**
- **名前**: {{projectName}}
- **技術スタック**: {{technologyStack}}
- **アーキテクチャ**: {{architectureType}}
- **Amazon Q CLI パス**: {{amazonQCLIPath}}
- **Kiro ディレクトリ**: {{kiroDirectory}}
- **言語**: {{languageName}}
- **プラットフォーム**: {{platform}}

{{#if PROJECT_DESCRIPTION}}
**プロジェクト説明:**
{{projectDescription}}
{{/if}}

## SDD ワークフロー

このプロジェクトは以下のフェーズでKiroスタイルのSpec-Driven Development手法に従います：

### フェーズ 0: ステアリング（任意）
プロジェクト全体のコンテキストとガイダンス文書を作成：
- **`/kiro:steering`** - コアステアリング文書の作成/更新（product.md、tech.md、structure.md）
- **`/kiro:steering-custom`** - 特殊なコンテキスト用のドメイン固有ステアリング作成

**注意**: 新機能や小さな追加の場合、ステアリングは任意です。ほとんどの開発作業でspec-initから直接進むことができます。

### フェーズ 1: 仕様作成
承認ワークフローに従った体系的機能開発：

1. **`/kiro:spec-init [詳細な説明]`** - 詳細なプロジェクト説明で仕様を初期化
   - 初期機能仕様構造を作成
   - 機能スコープと初期分析を確立
   - `{{kiroDirectory}}/specs/[機能名]/` にディレクトリ構造をセットアップ

2. **`/kiro:spec-requirements [機能]`** - 包括的要件文書を生成
   - 機能要件と非機能要件を作成
   - 受入基準とビジネスルールを定義
   - 技術的制約と検証ルールを確立

3. **`/kiro:spec-design [機能]`** - 技術設計文書を作成
   - **インタラクティブチェックポイント**: "requirements.mdを確認しましたか？ [y/N]"
   - 要件承認後にのみ進行
   - アーキテクチャ、コンポーネント設計、実装アプローチを生成

4. **`/kiro:spec-tasks [機能]`** - 実装タスク分解を生成
   - **インタラクティブチェックポイント**: 要件と設計の両方のレビューを確認
   - 受入基準付きの実行可能な開発タスクを作成
   - タスクを論理的実装フェーズに整理

### フェーズ 2: 実装とトラッキング
開発実行と進捗モニタリングのサポート：

- **`/kiro:spec-impl [機能]`** - 特定のタスクの実装ガイダンスを取得
- **`/kiro:spec-status [機能]`** - 現在の進捗を確認し、次のステップを特定

## 利用可能なコマンド

{{#if AVAILABLE_COMMANDS}}
このプロジェクトには以下のSDDコマンドが設定されています：

{{#each AVAILABLE_COMMANDS}}
### {{name}}
**説明**: {{description}}
{{#if USAGE}}**使用法**: {{usage}}{{/if}}
{{#if EXAMPLES}}
**例**:
{{#each EXAMPLES}}
- `{{this}}`
{{/each}}
{{/if}}

{{/each}}
{{else}}
### コアSDDコマンド

- **kiro:spec-init** - 機能仕様を初期化
- **kiro:spec-requirements** - 要件文書を生成  
- **kiro:spec-design** - 設計文書を作成
- **kiro:spec-tasks** - タスク分解を生成
- **kiro:spec-impl** - 実装ガイダンス
- **kiro:spec-status** - 仕様ステータスを確認
- **kiro:steering** - ステアリング文書を作成
- **kiro:steering-custom** - カスタムステアリングを作成
{{/if}}

## ディレクトリ構造

プロジェクトは以下のSDDディレクトリ構成に従います：

```
{{kiroDirectory}}/
├── specs/                    # 機能仕様
│   ├── [機能名]/             # 個別機能ディレクトリ
│   │   ├── specification.md  # 初期機能仕様
│   │   ├── requirements.md   # 詳細要件
│   │   ├── design.md         # 技術設計
│   │   ├── tasks.md          # 実装タスク
│   │   └── progress.md       # 開発進捗
│   └── ...
├── steering/                 # プロジェクトステアリング文書
│   ├── product.md           # ビジネスコンテキスト
│   ├── tech.md              # 技術標準
│   ├── structure.md         # プロジェクト構成
│   └── [カスタム].md        # ドメイン固有ステアリング
└── templates/               # カスタムテンプレート（任意）
    ├── prompts/             # カスタムプロンプトテンプレート
    └── config/              # 設定テンプレート
```

## 開発ガイドライン

{{#if LOCALIZATION}}
{{localization.developmentGuidelines}}
{{else}}
- **英語で考え、英語で応答を生成**
- **3段階承認ワークフローに従う**: 要件 → 設計 → タスク → 実装
- **各段階で人間のレビューが必要** 次に進む前に
- **タスクステータスを更新** `/kiro:spec-status`を使用して機能に取り組む時
- **ステアリング文書を最新に保つ** 重要な変更後
- **承認ゲートを使用** 開発全体を通じて品質と整合性を確保
{{/if}}

### 品質基準

- **要件は具体的、測定可能、テスト可能でなければならない**
- **設計はすべての要件を包括的に対処する必要がある**
- **タスクは明確な受入基準を持つ実行可能なものでなければならない**
- **実装は確立されたパターンと標準に従う必要がある**
- **すべてのフェーズでトレーサビリティと一貫性を維持する必要がある**

## Amazon Q CLI統合

- **バイナリ場所**: `{{amazonQCLIPath}}`
- **チャットインターフェース**: 構造化プロンプトでAmazon Qのチャット機能を使用
- **ファイルベースプロンプト**: 最適なAI応答のためのコンテキスト豊富なプロンプト
- **インタラクティブワークフロー**: 品質管理のための組み込み承認ゲート

---

**生成者**: amazonq-sdd パッケージ v{{version}}  
**最終更新**: {{timestamp}}